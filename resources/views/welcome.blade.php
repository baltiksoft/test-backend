<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Тестовое задание</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,600&display=swap" rel="stylesheet" />

    </head>
    <body>

                    <main class="mt-6">
                            <h1>Тестовое задание</h1>
                            <p>Необходимо создать сервис для хранения и подачи объявлений. Объявления должны храниться в базе данных. Сервис должен предоставлять API, работающее поверх HTTP в формате JSON.</p>
                            <ol>
                                <li>Используем laravel 11.x + MySql 8 как БД.</li>
                                <li>3 метода: получение списка объявлений, получение одного объявления, создание объявления.</li>
                                <li>Валидация полей (не больше 3 ссылок на фото, описание не больше 1000 символов, название не больше 200 символов).</li>
                            <li>Метод получения списка объявлений:<ul>
                                    <li>Нужна пагинация, на одной странице должно присутствовать 10 объявлений</li>
                                    <li>Нужна возможность сортировки: по цене (возрастание/убывание) и по дате создания (возрастание/убывание)</li>
                                    <li>Поля в ответе: название объявления, ссылка на главное фото (первое в списке), цена</li></ul></li>
                                <li>Метод получения конкретного объявления:
                                    <ul><li>Обязательные поля в ответе: название объявления, цена, ссылка на главное фото</li>
                                        <li>Опциональные поля (можно запросить, передав параметр fields): описание, ссылки на все фото</li></ul></li>
                                <li>Метод создания объявления:
                                    <ul><li>Принимает все вышеперечисленные поля: название, описание, несколько ссылок на фотографии (сами фото загружать никуда не требуется), цена</li>
                                        <li>Возвращает ID созданного объявления и код результата (ошибка или успех)</li></ul></li>
                                <li>Должны быть написаны unit тесты для backend части.</li>
                                <li>Сделать frontend на vuejs. В качестве оформления можно использовать любой css framework</li>
                                <li>Код должен быть выложен на github или gitlab.</li>
                            </ol>
                            <h1>Результат выполнения</h1>
                            <ol><li>Реализованы методы API:
                                    <ul><li>создания объявления. <i>POST: /api/ads</i> с параметрами: <blockquote>{ "name": "Новое объявление", "description": "Подробное описание объявления", "filenames": [ "filename 1", "filename 2", "filename 3" ], "price": 111.0 }</blockquote> При этом, генерируется уникальное поле <strong>slug</strong> по наименованию объявления для дальнейшей идентификации объявления.</li>
                                        <li>получения списка всех объявлений: <i>GET: /api/ads</i></li>
                                        <li>получения списка всех объявлений с пагинацией: <i>GET: /api/ads/0/10</i>. Где 0 - первая запись, 10 - количество записей в ответе.</li>
                                        <li>получения списка всех объявлений с пагинацией и сортировкой: <i>GET: /api/ads/0/10/price/desc</i>. Где 0 - первая запись, 10 - количество записей в ответе, price - цена, desc - порядок сортировки.</li>
                                        <li>получение конкретного объявления: <i>GET: /api/ads/obieiavlenie-1</i>. Где obieiavlenie-1 - уникальный идентификатор записи.</li>
                                        <li>получение конкретного объявления с дополнительными полями: <i>GET: /api/ads/obieiavlenie-1/fields/photos</i>. Где obieiavlenie-1 - уникальный идентификатор записи, photos - поле, добавляющие ссылки в ответ.</li></ul></li>
                                <li>Созданы unit-тесты. <strong>AdsAddText</strong> - тест проверяющие создание объявлений, <strong>AdsTest</strong> - получение объявлений.</li>
                            </ol>
                    </main>

                    <footer class="py-16 text-center text-sm text-black dark:text-white/70">
                        Laravel v{{ Illuminate\Foundation\Application::VERSION }} (PHP v{{ PHP_VERSION }})
                    </footer>

    </body>
</html>
